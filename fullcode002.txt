<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Activity Loadout | D2LA</title>
<meta id="meta-description" name="description" content="Default loadout description for Destiny 2 activities." />

    <!-- Essential OG tags -->
<meta property="og:title" content="D2LA - Destiny 2 Loadout Advisor" />
<meta property="og:description" content="D2LA is a Destiny 2 Loadout Advisor that helps Guardians discover curated PvE loadouts, tiered by activity and subclass." />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://poly-d2la.github.io/d2-loadout-advisor/" />
<meta property="og:image" content="images/websnap.png" />
  <!-- Twitter OG tags -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content="D2LA - Destiny 2 Loadout Advisor" />
<meta name="twitter:description" content="Your curated PvE builds and activity-specific loadouts, assembled for endgame glory." />
<meta name="twitter:image" content="images/websnap.png" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
     <style>
    html {
      background-color: #1f2937; /* Tailwind's gray-800 */
    }
  </style>
</head>
<body class="text-white min-h-screen flex flex-col bg-gradient-to-br from-gray-800 via-gray-900 to-pink-950">
<main class="flex-grow p-6">
  
<!-- Navbar -->
<nav class="relative z-50 w-full bg-gradient-to-b from-black/80 via-gray-900/60 to-transparent text-white shadow backdrop-blur-sm border-b border-gray-700" x-data="{ open: false }">
  <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-start space-x-8">
    <!-- Logo -->
    <div class="text-lg font-bold tracking-wide">D2 Loadout Advisor</div>

   <!-- Desktop Nav -->
<div class="hidden md:flex space-x-4 text-sm md:text-base items-center relative">
  <a href="index.html" id="nav-home" class="transition font-semibold px-2 py-1 rounded">💠 Home</a>
  <a href="about.html" id="nav-about" class="transition font-semibold px-2 py-1 rounded">❔ About</a>

  <!-- Raids Dropdown -->
  <div class="group relative" x-data="{ open: false }">
    <button
      id="nav-raids"
      class="transition font-semibold px-2 py-1 rounded hover:text-purple-300 inline-flex items-center gap-1"
      @click="open = !open"
      @click.away="open = false"
    >
      🛡️ Raids
      <svg class="w-4 h-4 mt-0.5 transform transition-transform duration-200"
           :class="{ 'rotate-180': open }"
           fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </button>
    <div
      id="raidDropdown"
      class="absolute top-full left-2 hidden md:group-hover:block bg-gray-800 rounded shadow-lg z-50 w-max text-left pr-4 p-2"
      :class="{ 'block': open }"
    >
      <a href="raids.html" class="block px-4 py-2 hover:bg-gray-700 rounded text-purple-300 font-semibold">Overview</a>
    </div>
  </div>

  <!-- Dungeons Dropdown -->
  <div class="group relative" x-data="{ open: false }">
    <button
      id="nav-dungeons"
      class="transition font-semibold px-2 py-1 rounded hover:text-teal-300 inline-flex items-center gap-1"
      @click="open = !open"
      @click.away="open = false"
    >
      🗝️ Dungeons
      <svg class="w-4 h-4 mt-0.5 transform transition-transform duration-200"
           :class="{ 'rotate-180': open }"
           fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </button>
    <div
      id="dungeonDropdown"
      class="absolute top-full left-9 -translate-x-1/2 hidden md:group-hover:block bg-gray-800 rounded shadow-lg z-[9999] w-max text-left pr-4 p-2"
      :class="{ 'block': open }"
    >
      <a href="dungeons.html" class="block px-4 py-2 pr-4 hover:bg-gray-700 rounded text-teal-300 font-semibold text-left">Overview</a>
    </div>
  </div>
</div>


    <!-- Hamburger Button (Mobile) -->
    <button @click="open = !open" class="md:hidden focus:outline-none ml-auto">
      <svg x-show="!open" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
      <svg x-show="open" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>

<!-- Mobile Dropdown -->
<div x-show="open" class="md:hidden px-4 pb-4 space-y-4 text-sm">
  <!-- General Links -->
  <div class="pl-3 space-y-1 border-l border-gray-600">
<a href="index.html" class="flex items-center gap-0 hover:text-blue-300 font-semibold">
  <span class="text-lg w-6 text-center">💠</span><span>Home</span>
</a>
<a href="about.html" class="flex items-center gap-0 hover:text-yellow-300 font-semibold">
  <span class="text-lg w-6 text-center">❔</span> <span>About</span>
</a>
  </div>


  <!-- Raids Section -->
  <div>
    <div class="flex items-center gap-0 text-purple-300 font-semibold uppercase tracking-wide text-xs mb-1 border-b border-purple-500 pb-1">
      <span class="w-6 text-center">🛡️</span> <span>Raids</span>
    </div>
    <div id="raidDropdownMobile" class="space-y-1 pl-3 border-l border-purple-500">
      <a href="raids.html" class="block hover:text-purple-200 font-semibold">Overview</a>
      <!-- Raid links injected here -->
    </div>
  </div>

  <!-- Dungeons Section -->
  <div>
    <div class="flex items-center gap-0 text-teal-300 font-semibold uppercase tracking-wide text-xs mb-1 border-b border-teal-500 pb-1">
      <span class="w-6 text-center">🗝️</span> <span>Dungeons</span>
    </div>
    <div id="dungeonDropdownMobile" class="space-y-1 pl-3 border-l border-teal-500">
      <a href="dungeons.html" class="block hover:text-teal-200 font-semibold">Overview</a>
      <!-- Dungeon links injected here -->
    </div>
  </div>
</div>
</nav>







  <h1 id="activity-title" class="text-3xl md:text-5xl font-bold text-center mb-4 my-5">Loading...</h1>

  <!-- Activity Image -->
  <div class="flex justify-center mb-6">
    <div class="relative z-10 w-full max-w-3xl h-48 bg-gray-700 rounded-lg shadow-lg overflow-visible">
      <div id="activity-image" class="absolute inset-0 flex items-center justify-center text-xl">[ Loading Graphic... ]</div>
    </div>
  </div>

<!-- Difficulty Toggle (moved outside scroll zone) -->
<div id="difficulty-controls" class="sticky top-0 z-40 bg-gray-900/80 backdrop-blur-sm py-4 mb-4">
  <div class="flex justify-center gap-4">
    <button onclick="setDifficulty('Normal', this)" id="normalBtn" class="px-4 py-2 rounded bg-blue-600 hover:bg-blue-500 transition">Normal</button>
    <button onclick="setDifficulty('Master', this)" id="masterBtn" class="px-4 py-2 rounded bg-red-600 hover:bg-red-500 transition">Master</button>
  </div>
</div>

<!-- Scroll anchor and encounter container -->
<div id="scroll-anchor" class="h-0"></div>
<div id="encounter-container" class="space-y-6 max-w-4xl w-full mx-auto"></div>

  </main>

<div id="tipModal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 hidden">
  <div id="tipModalBox" class="bg-gray-900 text-white p-6 rounded-lg max-w-md w-full relative">
    <button onclick="closeTipModal()" class="absolute top-2 right-2 text-gray-400 hover:text-white">
      ✕
    </button>
    <h3 class="text-lg font-bold mb-2">Encounter Tips</h3>
    <div id="tipModalContent" class="text-sm text-gray-300 space-y-2">
      <!-- Dynamic content goes here -->
    </div>
  </div>
</div>


  <!-- Sticky Footer -->
  <footer class="w-full text-gray-500 text-[0.6rem] text-center py-1 border-t border-gray-800 bg-gradient-to-t from-black/70 via-gray-900/50 to-transparent backdrop-blur-sm leading-tight">
    Site created by Poly.<br />
    Loadout info is curated, compiled, and tested by 
    <a href="https://www.youtube.com/@TheAegisRelic" target="_blank" class="text-blue-400 hover:underline">📺 TheAegisRelic</a>. 
    View their 
    <a href="https://docs.google.com/spreadsheets/d/1JM-0SlxVDAi-C6rGVlLxa-J1WGewEeL8Qvq4htWZHhY/edit?gid=1087089423#gid=1087089423" target="_blank" class="text-blue-400 hover:underline">📊 Endgame Tierlist</a>.
  </footer>


<script>
  const params = new URLSearchParams(window.location.search);
  const type = params.get("type");
  const name = params.get("name");
  let currentLoadouts = {};
  let currentDifficulty = "Normal";
  
  
function setDifficulty(level, buttonElement) {
  const masterBtn = document.getElementById("masterBtn");

  if (type === "dungeon" && level === "Master") return;

  // ✅ Blur the clicked button
  if (buttonElement) buttonElement.blur();

  // ✅ Delay re-render until after blur and layout settle
  requestAnimationFrame(() => {
    currentDifficulty = level;
    renderEncounters();

    // ✅ Restore previously open encounter
    const openDiv = document.querySelector("#encounter-container > div > div:not(.hidden)");
    const openId = openDiv?.id;
    if (openId) {
      const el = document.getElementById(openId);
      if (el) {
        el.classList.remove("hidden");
        const arrow = el.previousElementSibling.querySelector(".toggle-arrow");
        if (arrow) arrow.textContent = "▲";
      }
    }

    document.getElementById("normalBtn").classList.toggle("opacity-60", level !== "Normal");

    if (masterBtn) {
      if (type === "dungeon") {
        masterBtn.style.display = "none";
      } else {
        masterBtn.style.display = "";
        masterBtn.classList.toggle("opacity-60", level !== "Master");
      }
    }
  });
}



function renderEncounters() {
  // ✅ Save scroll position
  const scrollY = window.scrollY;

  // ✅ Save IDs of open encounters
  const openIds = Array.from(document.querySelectorAll('[id^="encounter-"]'))
    .filter(el => !el.classList.contains("hidden"))
    .map(el => el.id);

  const container = document.getElementById("encounter-container");
  container.replaceChildren();

  const classColors = {
    Hunter: "text-teal-300",
    Titan: "text-red-400",
    Warlock: "text-yellow-300"
  };
  const classBackgrounds = {
    Hunter: "bg-teal-600/50",
    Titan: "bg-red-900/50",
    Warlock: "bg-yellow-900/40"
  };
  const classIcons = {
    Hunter: "images/icons/hunter.svg",
    Titan: "images/icons/titan.svg",
    Warlock: "images/icons/warlock.svg"
  };
  const badgeColors = {
    "Primary": "bg-slate-500 text-white",
    "Energy": "bg-green-600 text-white",
    "Heavy": "bg-purple-700 text-white",
    "Exotic Armour": "bg-yellow-600 text-white",
    "Super": "bg-rose-500 text-white"
  };
  const iconMap = {
    "Primary": "images/icons/ammo-primary.svg",
    "Energy": "images/icons/ammo-energy.svg",
    "Heavy": "images/icons/ammo-heavy.svg"
  };

  Object.entries(currentLoadouts).forEach(([key, encounter]) => {
    const loadoutData = encounter.loadouts?.[currentDifficulty];
    if (!loadoutData) return;

    const collapseId = `encounter-${key}`;
    const section = document.createElement("div");

    const badgeOrder = ["Primary", "Energy", "Heavy", "Exotic Armour", "Super"];

section.innerHTML = `
  <div class="bg-gray-800 rounded-lg shadow overflow-hidden">
    <button onclick="this.blur(); toggleEncounter('${collapseId}')" class="w-full text-left px-4 py-3 flex justify-between items-center hover:bg-gray-700 transition">
      <h2 class="text-lg font-bold flex items-center gap-2">
        <span class="text-2xl">${encounter.icon || "📌"}</span> ${encounter.displayName}
      </h2>
      <span class="text-gray-400 text-sm toggle-arrow">▼</span>
    </button>
    <div id="${collapseId}" class="px-4 pb-4 hidden">
${encounter.image ? `
  <div class="relative w-full aspect-[3/1] sm:aspect-[5/2] lg:aspect-[16/5] overflow-hidden rounded mb-4 bg-gray-700">
    <img src="${encounter.image}" alt="${encounter.displayName}" class="w-full h-full object-cover object-center" loading="lazy" />
    
    <button onclick="openTipModal('${key}')" 
            class="absolute top-2 right-2 flex items-center gap-1 text-amber-100 hover:text-white transition transform hover:scale-105"
            title="View tips">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 sm:h-7 sm:w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M12 20a8 8 0 100-16 8 8 0 000 16z" />
      </svg>
      <span class="hidden sm:inline text-xs font-semibold tracking-wide">Tips</span>
    </button>
  </div>` : ""}


      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        ${["Hunter", "Warlock", "Titan"].map(cls => {
          const items = loadoutData?.[cls];
          if (!items) {
            return `
              <div class="p-4 rounded-md ${classBackgrounds[cls]} border border-gray-700 shadow-sm min-w-0 break-words">
                <h3 class="text-lg font-bold ${classColors[cls]} mb-2">${cls}</h3>
                <p class="text-gray-500 italic">No data</p>
              </div>`;

              }

              const renderedItems = badgeOrder.map(label => {
                const match = items.find(i => i.label === label);
                if (!match) return null;

                const badge = badgeColors[label] || "bg-gray-600 text-white";
                const icon = iconMap[label];

return `
  <li class="space-y-1">
    <div>
      <span class="inline-flex items-center gap-1 px-2 py-0.5 text-xs font-semibold rounded ${badge} whitespace-nowrap">
        ${icon ? `<img src="${icon}" alt="${label} icon" class="h-4 w-4 inline-block" />` : ""}
        ${label}
      </span>
    </div>
    <div class="pl-4 space-y-2">
      <!-- Recommended Section -->
      <div>
        <div class="text-xs text-yellow-200 uppercase font-bold tracking-wide" style="text-shadow: 0 0 4px rgba(125, 211, 252, 0.6);">
          Recommended
        </div>
        <div class="text-sm sm:text-base text-white font-medium tracking-wide break-words">
          ${match.item}
        </div>
        <div class="border-t border-yellow-400 opacity-70 w-3/4 mt-2"></div>
      </div>

      <!-- Alternative Section -->
      ${match.alt ? `
      <div>
        <div class="text-xs text-gray-300 uppercase mt-1">Alternative</div>
        <div class="text-sm sm:text-base text-white font-medium tracking-wide break-words">
          ${match.alt}
        </div>
      </div>` : ""}
    </div>
  </li>
`;


              }).filter(Boolean).join("");

              return `
                <div class="p-4 rounded-md ${classBackgrounds[cls]} border border-gray-700 shadow-sm min-w-0 break-words">
                  <h3 class="text-lg font-bold ${classColors[cls]} mb-2 flex items-center gap-2">
                    <img src="${classIcons[cls]}" alt="${cls} icon" class="h-5 w-5 inline-block" />
                    ${cls}
                    <span class="px-2 py-1 text-xs rounded ${currentDifficulty === "Normal" ? "bg-blue-700" : "bg-red-700"} text-white">
                      ${currentDifficulty}
                    </span>
                  </h3>
                  <ul class="list-none ml-2 space-y-3 text-gray-300">
                    ${renderedItems}
                  </ul>
                </div>`;
            }).join("")}
          </div>
        </div>
      </div>
    `;
    container.appendChild(section);
  });

// ✅ Reopen previously open encounters
openIds.forEach(id => {
  const el = document.getElementById(id);
  if (el) el.classList.remove("hidden");
});

// ✅ Scroll to anchor after DOM updates
requestAnimationFrame(() => {
  const anchor = document.getElementById("scroll-anchor");
  if (anchor) {
    anchor.scrollIntoView({ block: "start", behavior: "auto" });
  }
});

}


function toggleEncounter(id) {
  const el = document.getElementById(id);
  if (!el) return;
  el.classList.toggle("hidden");
}


  function updateMeta(activity) {
    const title = activity.displayName || activity.name || "Activity";
    const description = activity.description || "Curated Destiny 2 loadouts for this activity.";

    document.title = `${title} | D2LA`;

    const descTag = document.querySelector('meta[name="description"]');
    if (descTag) descTag.setAttribute('content', description);

    const ogTitle = document.querySelector('meta[property="og:title"]');
    if (ogTitle) ogTitle.setAttribute('content', `${title} | D2LA`);

    const ogDesc = document.querySelector('meta[property="og:description"]');
    if (ogDesc) ogDesc.setAttribute('content', description);
  }
  
function populateDropdowns(data) {
  const raidDesktop = document.getElementById("raidDropdown");
  const dungeonDesktop = document.getElementById("dungeonDropdown");
  const raidMobile = document.getElementById("raidDropdownMobile");
  const dungeonMobile = document.getElementById("dungeonDropdownMobile");

  // ✅ If none of the dropdown containers exist, skip this function
  if (!raidDesktop && !dungeonDesktop && !raidMobile && !dungeonMobile) return;

  const createLink = (type, key, name) =>
    `<a href="activity.html?type=${type}&name=${key}" class="block px-4 py-2 hover:bg-gray-700">${name}</a>`;

  const createMobileLink = (type, key, name) =>
    `<a href="activity.html?type=${type}&name=${key}" class="block hover:text-gray-300">${name}</a>`;

  for (const [key, raid] of Object.entries(data.raids || {})) {
    if (raidDesktop) raidDesktop.innerHTML += createLink("raid", key, raid.displayName);
    if (raidMobile) raidMobile.innerHTML += createMobileLink("raid", key, raid.displayName);
  }

  for (const [key, dungeon] of Object.entries(data.dungeons || {})) {
    if (dungeonDesktop) dungeonDesktop.innerHTML += createLink("dungeon", key, dungeon.displayName);
    if (dungeonMobile) dungeonMobile.innerHTML += createMobileLink("dungeon", key, dungeon.displayName);
  }
}


fetch("data.json")
  .then(res => res.json())
  .then(data => {
    if (typeof populateDropdowns === "function") {
  populateDropdowns(data);
}

    const activity = data?.[type + "s"]?.[name];
    if (!activity) {
      document.getElementById("activity-title").textContent = "Activity Not Found";
      return;
    }
    

      updateMeta(activity);

      document.getElementById("activity-title").textContent = activity.displayName;
      document.getElementById("activity-image").innerHTML =
        `<img src="${activity.image}" alt="${activity.displayName}" class="w-full h-full object-cover" />`;

      currentLoadouts = activity.encounters;
      renderEncounters();

      // ✅ Hide Master button immediately for dungeons
      if (type === "dungeon") {
        const masterBtn = document.getElementById("masterBtn");
        if (masterBtn) masterBtn.style.display = "none";
      }
    })
    .catch(err => {
      console.error(err);
      document.getElementById("activity-title").textContent = "Error loading data";
    });

  for (const key in navMap) {
    if (path.includes(key)) {
      const { id, bg, text } = navMap[key];
      const el = document.getElementById(id);
      if (el) el.classList.add(bg, text);
    }
   
    //  Modal Encounter tips area
  const encounterTips = {
  "encounter-1": "Use a Well of Radiance during the damage phase to stay alive.",
  "encounter-2": "Watch for the overload champions near the second plate.",
  // Add more keyed by encounter ID
};

function openTipModal(encounterKey) {
  const modal = document.getElementById("tipModal");
  const content = document.getElementById("tipModalContent");
  content.innerText = encounterTips[encounterKey] || "No tips available for this encounter.";
  modal.classList.remove("hidden");
}

function closeTipModal() {
  document.getElementById("tipModal").classList.add("hidden");
}
    // 🔑 Escape key closes modal
    document.addEventListener("keydown", (e) => {
    const modal = document.getElementById("tipModal");
    if (e.key === "Escape" && !modal.classList.contains("hidden")) {
    closeTipModal();
  }
});
    // 🔲 Click outside the modal box to close
document.getElementById("tipModal").addEventListener("click", (e) => {
  const modalBox = document.getElementById("tipModalBox");
  if (!modalBox.contains(e.target)) {
    closeTipModal();
  }
});

  }
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const path = window.location.pathname;
    const filename = path.split("/").pop().split(".")[0]; // e.g. "about"
    const params = new URLSearchParams(window.location.search);
    const type = params.get("type"); // e.g. "raid"

    const navMap = {
      index:    { id: "nav-home",     bg: "bg-blue-600",   text: "text-white" },
      raids:    { id: "nav-raids",    bg: "bg-purple-600", text: "text-white" },
      dungeons: { id: "nav-dungeons", bg: "bg-teal-600",   text: "text-white" },
      about:    { id: "nav-about",    bg: "bg-yellow-600", text: "text-white" }
    };

    // Highlight based on filename
    if (navMap[filename]) {
      const { id, bg, text } = navMap[filename];
      const el = document.getElementById(id);
      if (el) el.classList.add(bg, text);
    }

    // Highlight based on activity type (for activity.html?type=raid)
    if (type === "raid" && navMap.raids) {
      const { id, bg, text } = navMap.raids;
      const el = document.getElementById(id);
      if (el) el.classList.add(bg, text);
    }

    if (type === "dungeon" && navMap.dungeons) {
      const { id, bg, text } = navMap.dungeons;
      const el = document.getElementById(id);
      if (el) el.classList.add(bg, text);
    }
  });
</script>
  
</body>
</html>